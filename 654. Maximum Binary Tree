/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findmax(vector<int>& nums,int start ,int end)
    {
        int max=-1;
        int pos=start;
        for(int i=start;i<=end;i++)
        {
            if(max<nums[i])
            {
                max=nums[i];
                pos=i;
            }
        }
        
        return pos;
        
    }
    TreeNode* construct(vector<int>&nums,int start,int end)
    {
        int pos=0;
        if(start==end)
        {
            return new TreeNode(nums[start]);
        }
        if(start>end)
        {
            return NULL;
        }
        
        pos=findmax(nums,start,end);
        
        TreeNode* node= new TreeNode(nums[pos]);
        node->right=construct(nums,pos+1,end);
        node->left=construct(nums,start,pos-1);
        
        return node;
        
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) 
    {
        
        TreeNode* root=construct(nums,0,nums.size()-1);
        return root;
        
    }
};
