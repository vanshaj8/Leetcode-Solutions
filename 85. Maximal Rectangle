class Solution {
public:
    
    void MAH(vector<int>col ,int& res2)
    {
        int n=col.size();
        stack<pair<int,int>>s;
        vector<int>left(n),right(n);
        
        // Nearest Samller to left
        
        for(int i=0;i<n;i++)
        {
            if(s.empty())
            {
                left[i]=-1;
            }
            else
            {
                if(s.top().first<col[i])
                {
                    left[i]=s.top().second;
                }
                else
                {
                    while(!s.empty() && s.top().first>=col[i])
                    {
                        s.pop();
                    }
                    if(s.empty())
                    {
                        left[i]=-1;
                    }
                    else
                    {
                       left[i]=s.top().second;   
                    }
                }
                
            }
            
            s.push({col[i],i});
        }
        
        // Clearing the Stack for the Right
        
        while(!s.empty())
        {
            s.pop();
        }
        
        // Nearest smallest right
        
        for(int i=n-1;i>=0;i--)
        {
            if(s.empty())
            {
                right[i]=n;
            }
            else
            {
                if(s.top().first<col[i])
                {
                    right[i]=s.top().second;
                }
                else
                {
                    while(!s.empty() && s.top().first>=col[i])
                    {
                        s.pop();
                    }
                    if(s.empty())
                    {
                        right[i]=n;
                    }
                    else
                    {
                        right[i]=s.top().second;
                    }
                }
            }
            
            s.push({col[i],i});
        }
        
        int ans=INT_MIN;
        
        for(int i=0;i<n;i++)
        {
            int x=right[i]-left[i]-1;
            ans=max(ans,x*col[i]);
        }
        
        res2=max(res2,ans);
    
    }
    int maximalRectangle(vector<vector<char>>& matrix)
    {
        if(matrix.empty())
        {
            return 0;
        }
        
        int res=INT_MIN;
        vector<int>col(matrix[0].size(),0);
        
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[i].size();j++)
            {
                if((matrix[i][j]-'0')==0)
                {
                    col[j]=0;
                }
                else
                {
                    col[j]+=1;
                }
            }
            
            MAH(col,res);
        }
            
        return res;
    }
};
