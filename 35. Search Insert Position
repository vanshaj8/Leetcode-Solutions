class Solution {
public:
    int searchInsert(vector<int>& nums, int target)
    {
        int low=0,mid;
        int high=nums.size()-1;
        if(target>nums[high])
        {
            return high+1;
        }
        while(low<=high)
        {
             mid=low+(high-low)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
            else if(nums[mid]>target)
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return low;
    }
};

also O(n) soln

class Solution {
public:
    int searchInsert(vector<int>& nums, int target)
    {
        int j=0;
        while(j<nums.size())
        {
            if(nums[j]>=target)
            {
                break;
            }
            j++;
        }
        return j;
    }
};
