/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    int maxDepth(Node* root) 
    {
        if(!root)
        {
            return 0;
        }
        queue<Node*> q;
        q.push(root);
        int levels=0;
        
        while(!q.empty())
        {
            levels++;
            
            int nodes_on_level=q.size();
            for(int i=0;i<nodes_on_level;i++)
            {
               Node* node=q.front();
               q.pop();
                
                for(Node* i:node->children)
                {
                  q.push(i);
                }
            }
        }
        
        return levels;
    }
};



ALSO

class Solution {
public:
    int maxDepth(Node* root, int d = 0) {
        if(!root) {
            return d;
        }
        int m_max = d + 1;
        for(int i = 0; i < root->children.size(); ++i) {
            m_max = max(m_max, maxDepth(root->children[i], d + 1));
        }
        return m_max;
    }
};
