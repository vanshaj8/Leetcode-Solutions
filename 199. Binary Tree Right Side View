/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) 
    {
        vector<int>res;
        if(!root)
        {
            return res;
        }
        vector<int>v;
        queue<TreeNode*>q;
        int levelcount=0;
        q.push(root);levelcount++;
        TreeNode* curr;
        while(!q.empty())
        {
            curr=q.front();q.pop();levelcount--;
            v.push_back(curr->val);
            if(curr->left)
            {
                q.push(curr->left);
            }
            if(curr->right)
            {
                q.push(curr->right);
            }
            if(levelcount==0)
            {
                res.push_back(v.back());
                v=vector<int>();
                levelcount=q.size();
            }
        }
        return res;
    }
};

Solution 2:

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if(root==NULL) return {};
        vector<int> v;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            v.push_back(q.back()->val);
            for(int i=q.size(); i>0; i--){
                TreeNode* node = q.front(); q.pop();
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
        }
        return v;
    }
};
