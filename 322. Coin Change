class Solution {
public:
    int targetsum(vector<int>coins,int n,int amount)
    {
        int dp[n+1][amount+1];
        // Iniitalising at i== and j==0
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=amount;j++)
            {
                if(i==0)
                {
                    dp[i][j]=INT_MAX-1;
                }
                if(j==0)
                {
                    dp[i][j]=0;
                }
            }
        }
        // Initialising at j==1
        for(int j=1;j<=amount;j++)
        {
            if(j%coins[0]==0)
            {
                dp[1][j]=j/coins[0];
            }
            else
            {
                dp[1][j]=INT_MAX-1;
            }
        }
        // Initialisng the whole table
        for(int i=2;i<=n;i++)
        {
            for(int j=1;j<=amount;j++)
            {
                if(coins[i-1]<=j)
                {
                    dp[i][j]=min(dp[i-1][j],1+dp[i][j-coins[i-1]]);
                }
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        if(dp[n][amount]==INT_MAX-1)
        {
            return -1;
        }
        else
        {
            return dp[n][amount];
        }
    }
    int coinChange(vector<int>& coins, int amount) 
    {
        int n=coins.size();
        
        return targetsum(coins,n,amount);
        
    }
};
