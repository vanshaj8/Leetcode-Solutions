class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) 
    {
        int n=nums.size();
        int sum=0;
        int count=0;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            if(nums[i]==0)
            {
                count++;
            }
        }
        if(S>sum)
        {
            return 0;
        }
        if((sum+S)%2!=0)
        {
            return 0;
        }
        int s=(sum+S)/2;
        int dp[n+1][s+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=s;j++)
            {
                if(i==0 && j==0)
                {
                    dp[i][j]=1;
                }
                else if(i==0)
                {
                    dp[i][j]=0;
                }
                else if(j==0)
                {
                    dp[i][j]=1;
                }
                else
                {
                    if(nums[i-1]==0)
                    {
                        dp[i][j]=dp[i-1][j];
                    }
                    else if(nums[i-1]<=j)
                    {
                        dp[i][j]=dp[i-1][j] +dp[i-1][j-nums[i-1]];
                    }
                    else
                    {
                        dp[i][j]=dp[i-1][j];
                    }
                }
            }
        }
        
        
        return pow(2,count)*dp[n][s];
    }
};
