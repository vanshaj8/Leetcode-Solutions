class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) 
    {
        int n=nums.size();
        int sum=0;
        int count=0;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            if(nums[i]==0)
            {
                count++;
            }
        }
        if(S>sum)
        {
            return 0;
        }
        if((sum+S)%2!=0)
        {
            return 0;
        }
        int s=(sum+S)/2;
        int dp[n+1][s+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=s;j++)
            {
                if(i==0 && j==0)
                {
                    dp[i][j]=1;
                }
                else if(i==0)
                {
                    dp[i][j]=0;
                }
                else if(j==0)
                {
                    dp[i][j]=1;
                }
                else
                {
                    if(nums[i-1]==0)
                    {
                        dp[i][j]=dp[i-1][j];
                    }
                    else if(nums[i-1]<=j)
                    {
                        dp[i][j]=dp[i-1][j] +dp[i-1][j-nums[i-1]];
                    }
                    else
                    {
                        dp[i][j]=dp[i-1][j];
                    }
                }
            }
        }
        
        
        return pow(2,count)*dp[n][s];
    }
};

/*

this cpp solution is accepted on leetcode:
1. By multiplying pow(2,cnt), it will consider all the subsets of 0 which was not considered earlier.
2. one more condition needs to be checked i.e.if((S+sum)%2!=0)  then  we would never get the difference S by partitioning the 

Cnt is for '0's in the array. If we have n number of zeroes then we need to multiply out result of count of subsets with a sum to 2^n.  And we need to not consider this while calculating in bottom-up manner, hence the case " if(nums[i-1]==0) { dp[i][j] = dp[i-1][j] } ".
For example: If we have 2(cnt=2) zeroes in the example array for which we calculate count of subset with a sum then there are 4(2^cnt) ways that is either selecting first zero, second selecting second 0 present in array, third not selecting both, fourth selecting both.
Hope this will be helpful.


*/
