class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) 
    {        
        vector<vector<int>> ans;
        
        priority_queue<pair<int,int>> maxheap;
        
        for(int i=0;i<points.size();i++)
        {
            int val=points[i][0]*points[i][0] + points[i][1]*points[i][1];
            maxheap.push(make_pair(val,i));
            
            if(maxheap.size()>k)
            {
                maxheap.pop();
            }
        }
        
        vector<int> vect;
        
        // int i=0;
        while(!maxheap.empty())
        {
            pair<int,int> top=maxheap.top();
            vect.push_back(points[top.second][0]);
            vect.push_back(points[top.second][1]);
            ans.push_back(vect);
            vect.clear();
            maxheap.pop();

        }
                
        return ans;
    }
};
