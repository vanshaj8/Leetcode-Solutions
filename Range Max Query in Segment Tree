#include<bits/stdc++.h>
using namespace std;


int getmid(int s,int e)
{
	return s +(e-s)/2 ;
}
int minVal(int x, int y) { return (x < y)? x: y; }  

// Range minimum Query
int RMQUtil(int *st,int ss ,int se,int qs,int qe,int si)
{
	// IF range is totally Over
	if(qs<=ss && qe>=se)
	{
		return st[si];
	}
	if(se<qs || ss>qe)
	{
		return INT_MIN;
	}
	
	// if A Part OF THIS SEGEMENT OVERLAPS 
	int mid=getmid(ss,se);
	return max(RMQUtil(st,ss,mid,qs,qe,2*si+1), RMQUtil(st,mid+1,se,qs,qe,2*si+2));
}
int RMQ(int *st,int n,int qs,int qe)
{
	// check for Enormous Input values
	if(qs<0 || qe>n-1 || qs>qe)
	{
		cout<<"Invalid Range";
		return -1;
	}
	
	return RMQUtil(st,0,n-1,qs,qe,0);
}
// Updating The value
// The Function to update Value in input array ..it uses Updatvalueutil() to update 

void updatevalueUtil(int *st,int ss,int se,int i,int diff,int si)
{
	if(i<ss || i>se) // If the input does not lie in this range
	{
		return ;
	}
	st[si]=st[si]+diff; // iF lies int range of the children then update
	if(se!=ss)
	{
		int mid=getmid(ss,se);
		updatevalueUtil(st,ss,mid,i,diff,2*si+1);
		updatevalueUtil(st,mid+1,se,i,diff,2*si+2);
		
	}
}
void updatevalue(int arr[],int *st,int n,int i,int new_val)
{
	if(i<0 || i>n-1)
	{
		cout<<"Invalid";
		return ;
	}
	
	int diff=new_val-arr[i];
	arr[i]=new_val;
	updatevalueUtil(st,0,n-1,i,diff,0);
}
// Finding Sum
int getsumUtil(int *st,int ss,int se,int qs,int qe,int si)
{
	// If total Overlap
	if(qs<=ss && qe>=se)
	{
		return st[si];
	}
	// If no overlap
	if(ss>qe || se<qs)
	{
		return 0;
	}
	// If partial overlap
	int mid=getmid(ss,se);
	return getsumUtil(st,ss,mid,qs,qe,2*si+1)+getsumUtil(st,mid+1,se,qs,qe,2*si+2);
}
int getsum(int *st,int n,int qs,int qe)
{
	if(qs<0 || qe>n-1 || qs>qe)
	{
		cout<<"InValid Input";
		return -1;
	}
	return getsumUtil(st,0,n-1,qs,qe,0);
}
// A recursive function that constructs Segment Tree for array
// si is the index of current node in segment tree st
int constructUtil(int arr[],int ss,int se,int *st,int si)
{
	// If there is one Element in a segment tree
	// Also the Conditon of Leaf Node
	if(ss==se)
	{
		st[si]=arr[ss];
		return arr[ss];
	}
	int mid=getmid(ss,se);
	
	st[si]=max(constructUtil(arr,ss,mid,st,2*si+1),constructUtil(arr,mid+1,se,st,2*si+2));
	
	return st[si];
}
int *constructST(int arr[],int n)
{
	// ALlcate memory for segment tree	
	// Height of Segement tree
	int x=(int)(ceil(log2(n)));
	
	// Maximum size of the Segment Tree
	int max_size=2*(int)pow(2,x)-1;
	
	// allcate Memory
	int *st=new int[max_size];

	// FIll the allocated Memory st
	constructUtil(arr,0,n-1,st,0); 	
	
	return st;
}
int main()
{
	int arr[]={1,3,5,7,9,11};
	
	int n=sizeof(arr)/sizeof(arr[0]);
	int *st= constructST(arr,n);
	cout<<"Sum of values in given range = "<<getsum(st, n,1, 3)<<endl;  

    // updatevalue(arr, st, n, 1, 10);  
  
    // Find sum after the value is updated  
    // cout<<"Updated sum of values in given range = "
       //     <<getsum(st, n, 1, 3)<<endl;  
	
	cout<<"Minimum of values in range "<<"is = "<<RMQ(st, n, 3,5)<<endl;  
	return 0;
}
